@page "/myPresents"
@rendermode InteractiveServer
@attribute [Authorize]

@using Christmas.Components.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject ChristmasPresentService ChristmasPresentService

@if (MyChristmasPresents != null && MyChristmasPresents.Any())
{
    <h5>Presents:</h5>
    <ul>
    @foreach(string present in MyChristmasPresents)
    {
        <li>@present &nbsp;
            @if (MyChristmasPresents.Count() > 1)
            {
                <button @onclick="@(() => DeleteChristmasPresent(present))" type="button">Delete</button>
            }
        </li>
    }
    </ul>
}
else
{
    <p>Loading...</p>
}

<input @bind="PresentToAdd" type="text" @onkeyup="Enter"/>
<button @onclick="AddChristmasPresent" type="button">Add Present</button>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private ClaimsPrincipal? User { get; set; }

    private IEnumerable<string>? MyChristmasPresents { get; set; }

    private string PresentToAdd { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState != null) User = (await AuthenticationState).User;

        await Task.Run(RefreshMyChristmasPresents);

        await base.OnInitializedAsync();
    }

    private void RefreshMyChristmasPresents()
    {
        if (User != null) MyChristmasPresents = ChristmasPresentService.GetPresentsForThisUser(
            User.FindFirstValue("name") ?? throw new InvalidOperationException()
        );
    }

    private void AddChristmasPresent()
    {
        if(PresentToAdd.Length > 0)
        {
            ChristmasPresentService.AddChristmasPresentForThisUser(User.FindFirstValue("name"), PresentToAdd);

            RefreshMyChristmasPresents();

            PresentToAdd = "";
        }
    }

    private void AddChristmasPresent(string present)
    {
        if(present.Length > 0)
        {
            if (User != null)
                ChristmasPresentService.AddChristmasPresentForThisUser(
                    User.FindFirstValue("name") ?? throw new InvalidOperationException(),
                    present
                );

            RefreshMyChristmasPresents();

            PresentToAdd = "";
        }
    }

    private void DeleteChristmasPresent(string presentToDelete)
    {
        if (User != null) 
            ChristmasPresentService.DeleteChristmasPresentForThisUser(
        User.FindFirstValue("name") ?? throw new InvalidOperationException(),
                presentToDelete
            );

        RefreshMyChristmasPresents();
    }

    private void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            AddChristmasPresent(PresentToAdd);
        }
    }
}
