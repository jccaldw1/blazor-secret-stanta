@page "/presents"
@attribute [Authorize]
@inject SelectedUserContainer SelectedUserContainer

@using Christmas.Components.MongoDb
@using Christmas.Components.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Christmas.Components.Container

@inject ChristmasPresentService ChristmasPresentService

@if (DistinctUsers != null && DistinctUsers.Any())
{
    @if (ChristmasPresents != null)
    {
        <div class="row">
            <div class="col-2">
                @foreach (string recipient in DistinctUsers)
                {
                    <button type="button" class="row button btn-primary m-2" @onclick="() => SetSelectedUser(recipient)">@recipient</button>
                }
            </div>
            <div class="col-10">
                @if (SelectedUserContainer.SelectedUser != string.Empty)
                {
                <div class="row">
                    <div class="col-6"><strong>Gift</strong></div>
                    <div class="col-6"><strong>Gotten?</strong></div>
                </div>
                <br/>
                }
                <div class="row">
                    @foreach (ChristmasPresent present in ChristmasPresents.Where(christmasPresent => christmasPresent.recipient == SelectedUserContainer?.SelectedUser))
                    {
                        <p class="col-6">@present.gift</p>
                        <input class="col-6 form-check" type="checkbox" checked="@present.gotten" @onchange="e => UpdateGottenStatusOfPresent(present, (bool)e.Value!)">
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <p>Loading presents...</p>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private ClaimsPrincipal? User { get; set; }
    
    private IEnumerable<string>? DistinctUsers { get; set; }

    private IEnumerable<ChristmasPresent>? ChristmasPresents { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState != null) User = (await AuthenticationState).User;

        ChristmasPresents = await Task.Run(GetGroupedChristmasPresentsForOtherUsers);

        DistinctUsers = ChristmasPresents.Select(present => present.recipient).Distinct();

        await base.OnInitializedAsync();
    }

    private IEnumerable<ChristmasPresent> GetGroupedChristmasPresentsForOtherUsers()
    {
        if (User != null)
            return ChristmasPresentService.GetPresentsForNotThisUser(
                User.FindFirstValue("name") ?? throw new InvalidOperationException()
            );

        return Enumerable.Empty<ChristmasPresent>();
    }

    private void UpdateGottenStatusOfPresent(ChristmasPresent present, bool gottenStatus)
    {
        ChristmasPresentService.ChangeGottenStatusOfChristmasPresentForOtherUser(present, gottenStatus);

        ChristmasPresents = GetGroupedChristmasPresentsForOtherUsers();
    }

    private void SetSelectedUser(string selectedUser)
    {
        SelectedUserContainer.SelectedUser = selectedUser;
    }

}

